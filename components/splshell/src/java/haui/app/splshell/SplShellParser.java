/* Generated By:JJTree&JavaCC: Do not edit this line. SplShellParser.java */
package haui.app.splshell;

public class SplShellParser/*@bgen(jjtree)*/implements SplShellParserTreeConstants, SplShellParserConstants {/*@bgen(jjtree)*/
  protected JJTSplShellParserState jjtree = new JJTSplShellParserState();

/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        if (jj_2_1(2147483647)) {
          ;
        } else {
          break label_1;
        }
        IncludeStatement();
      }
      label_2:
      while (true) {
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_2;
        }
        MethodDeclaration();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOL:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case STRING:
        case FILEREADER:
        case FILEWRITER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_3;
        }
        if (jj_2_3(2147483647)) {
          MainMethodDeclaration();
        } else if (jj_2_4(2147483647)) {
          VarDeclaration();
          jj_consume_token(51);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void VarDeclaration() throws ParseException {
 /*@bgen(jjtree) VarDeclaration */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      VariableDeclarator();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_4;
        }
        jj_consume_token(52);
        VariableDeclarator();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclarator() throws ParseException {
 /*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        VariableInitializer();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclaratorId() throws ParseException {
 /*@bgen(jjtree) VariableDeclaratorId */
  ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(JJTVARIABLEDECLARATORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_5;
        }
        jj_consume_token(54);
        ASTArrayDimNode jjtn001 = new ASTArrayDimNode(JJTARRAYDIMNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(55);
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.name = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MethodDeclaration() throws ParseException {
 /*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ResultType();
      MethodDeclarator();
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MethodDeclarator() throws ParseException {
 /*@bgen(jjtree) MethodDeclarator */
  ASTMethodDeclarator jjtn000 = new ASTMethodDeclarator(JJTMETHODDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      FormalParameters();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.method = t.image;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FormalParameters() throws ParseException {
 /*@bgen(jjtree) FormalParameters */
  ASTFormalParameters jjtn000 = new ASTFormalParameters(JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(49);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case FILEREADER:
      case FILEWRITER:
        FormalParameter();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 52:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_6;
          }
          jj_consume_token(52);
          FormalParameter();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(56);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FormalParameter() throws ParseException {
 /*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      VariableDeclaratorId();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MainMethodDeclaration() throws ParseException {
 /*@bgen(jjtree) MainMethodDeclaration */
  ASTMainMethodDeclaration jjtn000 = new ASTMainMethodDeclaration(JJTMAINMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT);
          jjtn000.type = INT;
      MainMethodDeclarator();
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MainMethodDeclarator() throws ParseException {
 /*@bgen(jjtree) MainMethodDeclarator */
  ASTMainMethodDeclarator jjtn000 = new ASTMainMethodDeclarator(JJTMAINMETHODDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(50);
      MainParameter();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MainParameter() throws ParseException {
 /*@bgen(jjtree) MainParameter */
  ASTMainParameter jjtn000 = new ASTMainParameter(JJTMAINPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(49);
      jj_consume_token(STRING);
      MainDeclaratorId();
      jj_consume_token(56);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MainDeclaratorId() throws ParseException {
 /*@bgen(jjtree) MainDeclaratorId */
  ASTMainDeclaratorId jjtn000 = new ASTMainDeclaratorId(JJTMAINDECLARATORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(57);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_7;
        }
        jj_consume_token(54);
        ASTArrayDimNode jjtn001 = new ASTArrayDimNode(JJTARRAYDIMNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(55);
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Method mappings
 */
  final public void MappedMethodDeclaration() throws ParseException {
 /*@bgen(jjtree) MappedMethodDeclaration */
  ASTMappedMethodDeclaration jjtn000 = new ASTMappedMethodDeclaration(JJTMAPPEDMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MappedBlock();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MappedBlock() throws ParseException {
 /*@bgen(jjtree) MappedBlock */
  ASTMappedBlock jjtn000 = new ASTMappedBlock(JJTMAPPEDBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(58);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOL:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case STRING:
        case FILEREADER:
        case FILEWRITER:
        case CONTINUE:
        case BREAK:
        case DO:
        case FALSE:
        case FOR:
        case IF:
        case READ:
        case RETURN:
        case SWITCH:
        case TRUE:
        case WHILE:
        case WRITE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case 49:
        case 51:
        case 58:
        case 60:
        case 61:
        case 90:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        BlockStatement();
      }
      jj_consume_token(59);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Expression syntax follows.
 */
  final public void Type() throws ParseException {
 /*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
        jj_consume_token(BOOL);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.type = BOOL;
        break;
      case CHAR:
        jj_consume_token(CHAR);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.type = CHAR;
        break;
      case BYTE:
        jj_consume_token(BYTE);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.type = BYTE;
        break;
      case SHORT:
        jj_consume_token(SHORT);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.type = SHORT;
        break;
      case INT:
        jj_consume_token(INT);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.type = INT;
        break;
      case LONG:
        jj_consume_token(LONG);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.type = LONG;
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.type = FLOAT;
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.type = DOUBLE;
        break;
      case STRING:
        jj_consume_token(STRING);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.type = STRING;
        break;
      case FILEREADER:
        jj_consume_token(FILEREADER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.type = FILEREADER;
        break;
      case FILEWRITER:
        jj_consume_token(FILEWRITER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.type = FILEWRITER;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ResultType() throws ParseException {
 /*@bgen(jjtree) ResultType */
  ASTResultType jjtn000 = new ASTResultType(JJTRESULTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jj_consume_token(VOID);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.type = VOID;
        break;
      case BOOL:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case FILEREADER:
      case FILEWRITER:
        Type();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Expression() throws ParseException {
    if (jj_2_5(2147483647)) {
      Assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case 49:
      case 60:
      case 61:
      case 81:
      case 82:
      case 86:
      case 87:
      case IDENTIFIER:
        ConditionalOrExpression();
        break;
      default:
        jj_la1[10] = jj_gen;
        if (jj_2_6(2147483647)) {
          MethodCallStatement();
        } else if (jj_2_7(2147483647)) {
          PreIncrementExpression();
        } else if (jj_2_8(2147483647)) {
          PreDecrementExpression();
        } else if (jj_2_9(2147483647)) {
          PostIncrementExpression();
        } else if (jj_2_10(2147483647)) {
          PostDecrementExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void VariableInitializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      ArrayInitializer();
      break;
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case 49:
    case 60:
    case 61:
    case 81:
    case 82:
    case 86:
    case 87:
    case IDENTIFIER:
      Expression();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializer() throws ParseException {
 /*@bgen(jjtree) ArrayInitializer */
  ASTArrayInitializer jjtn000 = new ASTArrayInitializer(JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(58);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case 49:
      case 58:
      case 60:
      case 61:
      case 81:
      case 82:
      case 86:
      case 87:
      case IDENTIFIER:
        VariableInitializer();
        label_9:
        while (true) {
          if (jj_2_11(2)) {
            ;
          } else {
            break label_9;
          }
          jj_consume_token(52);
          VariableInitializer();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(59);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Assignment() throws ParseException {
    if (jj_2_12(2147483647)) {
      PrimaryExpression();
      jj_consume_token(53);
                            ASTAssignment jjtn001 = new ASTAssignment(JJTASSIGNMENT);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
        VariableInitializer();
      } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
      }
    } else if (jj_2_13(2147483647)) {
      PrimaryExpression();
      jj_consume_token(62);
                             ASTAddAssignment jjtn002 = new ASTAddAssignment(JJTADDASSIGNMENT);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
      try {
        VariableInitializer();
      } catch (Throwable jjte002) {
                             if (jjtc002) {
                               jjtree.clearNodeScope(jjtn002);
                               jjtc002 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte002 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte002;}
                             }
                             if (jjte002 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte002;}
                             }
                             {if (true) throw (Error)jjte002;}
      } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002,  2);
                             }
      }
    } else if (jj_2_14(2147483647)) {
      PrimaryExpression();
      jj_consume_token(63);
                             ASTSubstractAssignment jjtn003 = new ASTSubstractAssignment(JJTSUBSTRACTASSIGNMENT);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
      try {
        VariableInitializer();
      } catch (Throwable jjte003) {
                             if (jjtc003) {
                               jjtree.clearNodeScope(jjtn003);
                               jjtc003 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte003 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte003;}
                             }
                             if (jjte003 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte003;}
                             }
                             {if (true) throw (Error)jjte003;}
      } finally {
                             if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003,  2);
                             }
      }
    } else if (jj_2_15(2147483647)) {
      PrimaryExpression();
      jj_consume_token(64);
                             ASTMultAssignment jjtn004 = new ASTMultAssignment(JJTMULTASSIGNMENT);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
      try {
        VariableInitializer();
      } catch (Throwable jjte004) {
                             if (jjtc004) {
                               jjtree.clearNodeScope(jjtn004);
                               jjtc004 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte004 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte004;}
                             }
                             if (jjte004 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte004;}
                             }
                             {if (true) throw (Error)jjte004;}
      } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004,  2);
                             }
      }
    } else if (jj_2_16(2147483647)) {
      PrimaryExpression();
      jj_consume_token(65);
                             ASTDivAssignment jjtn005 = new ASTDivAssignment(JJTDIVASSIGNMENT);
                             boolean jjtc005 = true;
                             jjtree.openNodeScope(jjtn005);
      try {
        VariableInitializer();
      } catch (Throwable jjte005) {
                             if (jjtc005) {
                               jjtree.clearNodeScope(jjtn005);
                               jjtc005 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte005 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte005;}
                             }
                             if (jjte005 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte005;}
                             }
                             {if (true) throw (Error)jjte005;}
      } finally {
                             if (jjtc005) {
                               jjtree.closeNodeScope(jjtn005,  2);
                             }
      }
    } else if (jj_2_17(2147483647)) {
      PrimaryExpression();
      jj_consume_token(66);
                             ASTAndAssignment jjtn006 = new ASTAndAssignment(JJTANDASSIGNMENT);
                             boolean jjtc006 = true;
                             jjtree.openNodeScope(jjtn006);
      try {
        VariableInitializer();
      } catch (Throwable jjte006) {
                             if (jjtc006) {
                               jjtree.clearNodeScope(jjtn006);
                               jjtc006 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte006 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte006;}
                             }
                             if (jjte006 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte006;}
                             }
                             {if (true) throw (Error)jjte006;}
      } finally {
                             if (jjtc006) {
                               jjtree.closeNodeScope(jjtn006,  2);
                             }
      }
    } else if (jj_2_18(2147483647)) {
      PrimaryExpression();
      jj_consume_token(67);
                             ASTModAssignment jjtn007 = new ASTModAssignment(JJTMODASSIGNMENT);
                             boolean jjtc007 = true;
                             jjtree.openNodeScope(jjtn007);
      try {
        VariableInitializer();
      } catch (Throwable jjte007) {
                             if (jjtc007) {
                               jjtree.clearNodeScope(jjtn007);
                               jjtc007 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte007 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte007;}
                             }
                             if (jjte007 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte007;}
                             }
                             {if (true) throw (Error)jjte007;}
      } finally {
                             if (jjtc007) {
                               jjtree.closeNodeScope(jjtn007,  2);
                             }
      }
    } else if (jj_2_19(2147483647)) {
      PrimaryExpression();
      jj_consume_token(68);
                             ASTOrAssignment jjtn008 = new ASTOrAssignment(JJTORASSIGNMENT);
                             boolean jjtc008 = true;
                             jjtree.openNodeScope(jjtn008);
      try {
        VariableInitializer();
      } catch (Throwable jjte008) {
                             if (jjtc008) {
                               jjtree.clearNodeScope(jjtn008);
                               jjtc008 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte008 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte008;}
                             }
                             if (jjte008 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte008;}
                             }
                             {if (true) throw (Error)jjte008;}
      } finally {
                             if (jjtc008) {
                               jjtree.closeNodeScope(jjtn008,  2);
                             }
      }
    } else if (jj_2_20(2147483647)) {
      PrimaryExpression();
      jj_consume_token(69);
                             ASTXorAssignment jjtn009 = new ASTXorAssignment(JJTXORASSIGNMENT);
                             boolean jjtc009 = true;
                             jjtree.openNodeScope(jjtn009);
      try {
        VariableInitializer();
      } catch (Throwable jjte009) {
                             if (jjtc009) {
                               jjtree.clearNodeScope(jjtn009);
                               jjtc009 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte009 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte009;}
                             }
                             if (jjte009 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte009;}
                             }
                             {if (true) throw (Error)jjte009;}
      } finally {
                             if (jjtc009) {
                               jjtree.closeNodeScope(jjtn009,  2);
                             }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_10;
      }
      jj_consume_token(70);
           ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_11;
      }
      jj_consume_token(71);
           ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        InclusiveOrExpression();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
      }
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_12;
      }
      jj_consume_token(72);
          ASTBitwiseOrNode jjtn001 = new ASTBitwiseOrNode(JJTBITWISEORNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        ExclusiveOrExpression();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_13;
      }
      jj_consume_token(73);
          ASTBitwiseXorNode jjtn001 = new ASTBitwiseXorNode(JJTBITWISEXORNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        AndExpression();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_14;
      }
      jj_consume_token(74);
          ASTBitwiseAndNode jjtn001 = new ASTBitwiseAndNode(JJTBITWISEANDNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
      case 76:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
        jj_consume_token(75);
            ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
        try {
          RelationalExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
        } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
        }
        break;
      case 76:
        jj_consume_token(76);
            ASTNENode jjtn002 = new ASTNENode(JJTNENODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
        try {
          RelationalExpression();
        } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
        } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
      case 78:
      case 79:
      case 80:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        jj_consume_token(77);
          ASTLTNode jjtn001 = new ASTLTNode(JJTLTNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          AdditiveExpression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case 78:
        jj_consume_token(78);
          ASTGTNode jjtn002 = new ASTGTNode(JJTGTNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          AdditiveExpression();
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      case 79:
        jj_consume_token(79);
           ASTLENode jjtn003 = new ASTLENode(JJTLENODE);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
        try {
          AdditiveExpression();
        } catch (Throwable jjte003) {
           if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte003 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte003;}
           }
           if (jjte003 instanceof ParseException) {
             {if (true) throw (ParseException)jjte003;}
           }
           {if (true) throw (Error)jjte003;}
        } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  2);
           }
        }
        break;
      case 80:
        jj_consume_token(80);
           ASTGENode jjtn004 = new ASTGENode(JJTGENODE);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
        try {
          AdditiveExpression();
        } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte004;}
           }
           if (jjte004 instanceof ParseException) {
             {if (true) throw (ParseException)jjte004;}
           }
           {if (true) throw (Error)jjte004;}
        } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
           }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
      case 82:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        jj_consume_token(81);
          ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case 82:
        jj_consume_token(82);
          ASTSubtractNode jjtn002 = new ASTSubtractNode(JJTSUBTRACTNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
      case 84:
      case 85:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
        jj_consume_token(83);
          ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case 84:
        jj_consume_token(84);
          ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      case 85:
        jj_consume_token(85);
          ASTModNode jjtn003 = new ASTModNode(JJTMODNODE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          UnaryExpression();
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 81:
      jj_consume_token(81);
        ASTPositiveConstNode jjtn001 = new ASTPositiveConstNode(JJTPOSITIVECONSTNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
        UnaryExpression();
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  1);
        }
      }
      break;
    case 82:
      jj_consume_token(82);
        ASTNegativeConstNode jjtn002 = new ASTNegativeConstNode(JJTNEGATIVECONSTNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      try {
        UnaryExpression();
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  1);
        }
      }
      break;
    case 86:
      jj_consume_token(86);
        ASTBitwiseComplNode jjtn003 = new ASTBitwiseComplNode(JJTBITWISECOMPLNODE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      try {
        UnaryExpression();
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  1);
        }
      }
      break;
    case 87:
      jj_consume_token(87);
        ASTNotNode jjtn004 = new ASTNotNode(JJTNOTNODE);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      try {
        UnaryExpression();
      } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte004;}
        }
        if (jjte004 instanceof ParseException) {
          {if (true) throw (ParseException)jjte004;}
        }
        {if (true) throw (Error)jjte004;}
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  1);
        }
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_21(2147483647)) {
        PreIncrementExpression();
      } else if (jj_2_22(2147483647)) {
        PreDecrementExpression();
      } else if (jj_2_23(2147483647)) {
        PostIncrementExpression();
      } else if (jj_2_24(2147483647)) {
        PostDecrementExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case 49:
        case IDENTIFIER:
          PrimaryExpression();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PreIncrementExpression() throws ParseException {
 /*@bgen(jjtree) PreIncrementExpression */
  ASTPreIncrementExpression jjtn000 = new ASTPreIncrementExpression(JJTPREINCREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(60);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PreDecrementExpression() throws ParseException {
 /*@bgen(jjtree) PreDecrementExpression */
  ASTPreDecrementExpression jjtn000 = new ASTPreDecrementExpression(JJTPREDECREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(61);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PostIncrementExpression() throws ParseException {
 /*@bgen(jjtree) PostIncrementExpression */
  ASTPostIncrementExpression jjtn000 = new ASTPostIncrementExpression(JJTPOSTINCREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpression();
      jj_consume_token(60);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PostDecrementExpression() throws ParseException {
 /*@bgen(jjtree) PostDecrementExpression */
  ASTPostDecrementExpression jjtn000 = new ASTPostDecrementExpression(JJTPOSTDECREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpression();
      jj_consume_token(61);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    if (jj_2_25(2147483647)) {
      ArrayId();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Literal();
        break;
      default:
        jj_la1[29] = jj_gen;
        if (jj_2_26(2147483647)) {
          MethodCallStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 49:
            jj_consume_token(49);
            Expression();
            jj_consume_token(56);
            break;
          case IDENTIFIER:
            Id();
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void Id() throws ParseException {
 /*@bgen(jjtree) Id */
   ASTId jjtn000 = new ASTId(JJTID);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.name = t.image;
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ArrayId() throws ParseException {
 /*@bgen(jjtree) ArrayId */
   ASTArrayId jjtn000 = new ASTArrayId(JJTARRAYID);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtn000.name = t.image;
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_19;
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Id();
          break;
        case INTEGER_LITERAL:
          IntegerLiteral();
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(55);
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case CHARACTER_LITERAL:
      CharacterLiteral();
      break;
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case FLOATING_POINT_LITERAL:
      FloatLiteral();
      break;
    case STRING_LITERAL:
      StringLiteral();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    ASTTrueNode jjtn001 = new ASTTrueNode(JJTTRUENODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TRUE);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case FALSE:
    ASTFalseNode jjtn002 = new ASTFalseNode(JJTFALSENODE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FALSE);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CharacterLiteral() throws ParseException {
 Token t;
   ASTCharConstNode jjtn001 = new ASTCharConstNode(JJTCHARCONSTNODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(CHARACTER_LITERAL);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
       jjtn001.val = t.image;
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
    }
  }

  final public void StringLiteral() throws ParseException {
 Token t;
   ASTStringConstNode jjtn001 = new ASTStringConstNode(JJTSTRINGCONSTNODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(STRING_LITERAL);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
       jjtn001.val = t.image;
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
    }
  }

  final public void IntegerLiteral() throws ParseException {
 Token t;
   ASTIntConstNode jjtn001 = new ASTIntConstNode(JJTINTCONSTNODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(INTEGER_LITERAL);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
       jjtn001.val = t.image;
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
    }
  }

  final public void FloatLiteral() throws ParseException {
 Token t;
   ASTFloatConstNode jjtn001 = new ASTFloatConstNode(JJTFLOATCONSTNODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
       jjtn001.val = t.image;
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      break;
    default:
      jj_la1[35] = jj_gen;
      if (jj_2_27(2)) {
        LabeledStatement();
      } else if (jj_2_28(2147483647)) {
        MethodCallStatement();
        jj_consume_token(51);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
          Block();
          break;
        case FALSE:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case 49:
        case 60:
        case 61:
        case IDENTIFIER:
          StatementExpression();
          jj_consume_token(51);
          break;
        case IF:
          IfStatement();
          break;
        case SWITCH:
          SwitchStatement();
          break;
        case FOR:
          ForStatement();
          break;
        case WHILE:
          WhileStatement();
          break;
        case DO:
          DoWhileStatement();
          break;
        case BREAK:
          BreakStatement();
          break;
        case CONTINUE:
          ContinueStatement();
          break;
        case RETURN:
          ReturnStatement();
          break;
        case READ:
        case WRITE:
          IOStatement();
          break;
        case 90:
          JshStatement();
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void LabeledStatement() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(88);
    Statement();
  }

  final public void Block() throws ParseException {
 /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(58);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOL:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case STRING:
        case FILEREADER:
        case FILEWRITER:
        case CONTINUE:
        case BREAK:
        case DO:
        case FALSE:
        case FOR:
        case IF:
        case READ:
        case RETURN:
        case SWITCH:
        case TRUE:
        case WHILE:
        case WRITE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case 49:
        case 51:
        case 58:
        case 60:
        case 61:
        case 90:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_20;
        }
        BlockStatement();
      }
      jj_consume_token(59);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_29(2147483647)) {
      VarDeclaration();
      jj_consume_token(51);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUE:
      case BREAK:
      case DO:
      case FALSE:
      case FOR:
      case IF:
      case READ:
      case RETURN:
      case SWITCH:
      case TRUE:
      case WHILE:
      case WRITE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case 49:
      case 51:
      case 58:
      case 60:
      case 61:
      case 90:
      case IDENTIFIER:
        Statement();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StatementExpression() throws ParseException {
 /*@bgen(jjtree) StatementExpression */
  ASTStatementExpression jjtn000 = new ASTStatementExpression(JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_30(2147483647)) {
        PreIncrementExpression();
      } else if (jj_2_31(2147483647)) {
        PreDecrementExpression();
      } else if (jj_2_32(2147483647)) {
        PostIncrementExpression();
      } else if (jj_2_33(2147483647)) {
        PostDecrementExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case 49:
        case IDENTIFIER:
          Assignment();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MethodCallStatement() throws ParseException {
 /*@bgen(jjtree) MethodCallStatement */
  ASTMethodCallStatement jjtn000 = new ASTMethodCallStatement(JJTMETHODCALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(49);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case 49:
      case 60:
      case 61:
      case 81:
      case 82:
      case 86:
      case 87:
      case IDENTIFIER:
        Expression();
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 52:
            ;
            break;
          default:
            jj_la1[40] = jj_gen;
            break label_21;
          }
          jj_consume_token(52);
          Expression();
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jj_consume_token(56);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.method = t.image;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(49);
      Expression();
      jj_consume_token(56);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Statement();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(49);
      Expression();
      jj_consume_token(56);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DoWhileStatement() throws ParseException {
 /*@bgen(jjtree) DoWhileStatement */
  ASTDoWhileStatement jjtn000 = new ASTDoWhileStatement(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      Statement();
      jj_consume_token(WHILE);
      jj_consume_token(49);
      Expression();
      jj_consume_token(56);
      jj_consume_token(51);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(49);
      Expression();
      jj_consume_token(56);
      jj_consume_token(58);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case 89:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_22;
        }
        SwitchLabel();
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOL:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case STRING:
          case FILEREADER:
          case FILEWRITER:
          case CONTINUE:
          case BREAK:
          case DO:
          case FALSE:
          case FOR:
          case IF:
          case READ:
          case RETURN:
          case SWITCH:
          case TRUE:
          case WHILE:
          case WRITE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case 49:
          case 51:
          case 58:
          case 60:
          case 61:
          case 90:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[44] = jj_gen;
            break label_23;
          }
          BlockStatement();
        }
      }
      jj_consume_token(59);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      Expression();
                        ASTCaseNode jjtn001 = new ASTCaseNode(JJTCASENODE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(88);
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  1);
                        }
      }
      break;
    case 89:
      jj_consume_token(89);
              ASTDefaultNode jjtn002 = new ASTDefaultNode(JJTDEFAULTNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(88);
      } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
              }
      }
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(49);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case FILEREADER:
      case FILEWRITER:
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case 49:
      case 60:
      case 61:
      case IDENTIFIER:
        ForInit();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      jj_consume_token(51);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case 49:
      case 60:
      case 61:
      case 81:
      case 82:
      case 86:
      case 87:
      case IDENTIFIER:
    ASTForExpression jjtn001 = new ASTForExpression(JJTFOREXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
          Expression();
        } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(51);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case 49:
      case 60:
      case 61:
      case IDENTIFIER:
        ForUpdate();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(56);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForInit() throws ParseException {
 /*@bgen(jjtree) ForInit */
  ASTForInit jjtn000 = new ASTForInit(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_34(2147483647)) {
        VarDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case 49:
        case 60:
        case 61:
        case IDENTIFIER:
          StatementExpressionList();
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_24;
      }
      jj_consume_token(52);
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
 /*@bgen(jjtree) ForUpdate */
  ASTForUpdate jjtn000 = new ASTForUpdate(JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StatementExpressionList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      jj_consume_token(51);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
      jj_consume_token(51);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case 49:
      case 60:
      case 61:
      case 81:
      case 82:
      case 86:
      case 87:
      case IDENTIFIER:
        Expression();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jj_consume_token(51);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IncludeStatement() throws ParseException {
 /*@bgen(jjtree) IncludeStatement */
  ASTIncludeStatement jjtn000 = new ASTIncludeStatement(JJTINCLUDESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(48);
      t = jj_consume_token(STRING_LITERAL);
      jj_consume_token(51);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.path = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void JshStatement() throws ParseException {
 /*@bgen(jjtree) JshStatement */
  ASTJshStatement jjtn000 = new ASTJshStatement(JJTJSHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(90);
      t = jj_consume_token(STRING_LITERAL);
      jj_consume_token(51);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.command = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IOStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READ:
      ReadStatement();
      break;
    case WRITE:
      WriteStatement();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ReadStatement() throws ParseException {
 /*@bgen(jjtree) ReadStatement */
  ASTReadStatement jjtn000 = new ASTReadStatement(JJTREADSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(READ);
      t = jj_consume_token(IDENTIFIER);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.name = t.image;
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void WriteStatement() throws ParseException {
 /*@bgen(jjtree) WriteStatement */
  ASTWriteStatement jjtn000 = new ASTWriteStatement(JJTWRITESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WRITE);
      Expression();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(69)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(68)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(69)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(50)) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(64)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(67)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(63)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(66)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    if (jj_scan_token(55)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(53)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(58)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(49)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(FILEWRITER)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(FILEREADER)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(87)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(86)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(82)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(81)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(85)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(84)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(83)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_118()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_119()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(82)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(81)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(80)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(79)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(76)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(75)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  public SplShellParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[53];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xffe000,0x0,0x0,0x0,0x0,0xffe000,0x0,0xd6ffe000,0xffe000,0x1ffe000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0xd6000000,0xd6ffe000,0xd6000000,0x40000000,0x0,0x40000000,0x20000000,0x8000000,0xd6ffe000,0x8000000,0x40ffe000,0x40000000,0x40000000,0x40000000,0x0,0x40000000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x100000,0x200000,0x400000,0x100000,0x0,0x400000,0x340ad1fd,0x0,0x0,0x3002d120,0x3402d120,0x3402d120,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2d120,0xd120,0x20000,0x400000,0x100,0xd120,0x20,0x80000,0x3402d1fd,0x340ad1fd,0x340ad1fd,0x2d120,0x100000,0x3002d120,0x0,0x0,0x340ad1fd,0x0,0x3002d120,0x3002d120,0x3002d120,0x3002d120,0x100000,0x3002d120,0x84,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0x0,0x0,0x8c60000,0x8c60000,0x8c60000,0x0,0x40,0x80,0x100,0x200,0x400,0x1800,0x1800,0x1e000,0x1e000,0x60000,0x60000,0x380000,0x380000,0xc60000,0x8000000,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x0,0xc000000,0xc000000,0xc000000,0x8000000,0x0,0x8c60000,0x0,0x2000000,0xc000000,0x2000000,0x8000000,0x8c60000,0x8000000,0x8000000,0x0,0x8c60000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[34];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public SplShellParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public SplShellParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SplShellParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SplShellParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SplShellParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SplShellParser(SplShellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SplShellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[94];
    for (int i = 0; i < 94; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 53; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 94; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 34; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
